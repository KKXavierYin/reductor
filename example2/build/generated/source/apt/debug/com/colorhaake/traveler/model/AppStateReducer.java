// Generated by com.yheriatovych.reductor.processor.ReductorAnnotationProcessor (https://github.com/Yarikx/reductor)
package com.colorhaake.traveler.model;

import com.yheriatovych.reductor.Action;
import com.yheriatovych.reductor.Commands;
import com.yheriatovych.reductor.Pair;
import com.yheriatovych.reductor.Reducer;
import com.yheriatovych.reductor.Store;

public final class AppStateReducer implements Reducer<AppState> {
  private final Reducer<AppState> homeDataReducer;

  private AppStateReducer(Reducer<AppState> homeDataReducer) {
    this.homeDataReducer = homeDataReducer;
  }

  @Override
  public Pair<AppState, Commands> reduce(AppState state, Action action) {
    Pair<AppState, Commands> homeDataNext = homeDataReducer.reduce(state, action);

    return Pair.create(homeDataNext.first, new Commands() {
      @Override
      public void run(Store store) {
        if (homeDataNext.second != null) {
          homeDataNext.second.run(store);
        }
      }
    });
  }

  public static Builder builder() {
    return new Builder();
  }

  public static class Builder {
    private Reducer<AppState> homeDataReducer;

    private Builder() {
    }

    public Builder homeDataReducer(Reducer<AppState> homeDataReducer) {
      this.homeDataReducer = homeDataReducer;
      return this;
    }

    public AppStateReducer build() {
      if (homeDataReducer == null) {
        throw new IllegalStateException("homeDataReducer should not be null");
      }
      return new AppStateReducer(homeDataReducer);
    }
  }
}
